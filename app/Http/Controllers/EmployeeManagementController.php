<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\EmployeeUpdateRequest;
use App\Models\Divisions;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rules;
use Illuminate\View\View;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;
class EmployeeManagementController extends Controller
{
    protected static ?string $password;
    /**
     * Display a listing of the resource.
     * Note from the Developer: Only the Head of the Albay Provincial Human Settlement Office will manage the data for their employee, the rest will only view the employee status.
     */
    public function index()
    {
        //
        $aphso_employees = User::with('divisions')->paginate(10);
        $divisions = Divisions::all();

        return view('documents.employees', compact('aphso_employees', 'divisions'));
    }


    /**
     * Handle an incoming employee registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        //Refer to the column names on the table.
        $request->validate([
            'last_name' => 'required|string|max:50',
            'first_name' => 'required|string|max:50',
            'middle_name' => 'string|max:50|nullable',
            'address' => 'required|string|max:140',
            'birthdate' => 'required|date',
            'marital_status' => 'required|not_in:--Select Marital Status--',
            'email' => 'required|string|lowercase|email|max:255|unique:'.User::class,
            'contact_nos' => 'required|string|max:12',
            'division_name' => 'required|not_in:--Select Division--',
            'position' => 'required|string|max:255',
            'employee_image' => 'image|mimes:jpeg,png,jpg|max:2048'
        ]);

        Log::info($request->all());

        $defaultImage_path = 'profile_images/default-profile.png';

        try
        {
            //Retrieve the foreign key first, as the department head will assign the employee to a spcific division.
            $division = Divisions::where('division_name', '=', $request->division_name)->first();
            if(!$division){return redirect()->back()->withErrors(['division_name' => 'APHSO Division Does not Exist.']);}
            $division_id = $division->division_id;

            //This is to store profile pictures of the employee, if the head has a digital picture provided by the employee, else, the default image path will be posted.
            $image = $request->file('employee_image');
            if($image){
                $last_name = $request->last_name;
                $date = now()->format('m-d-Y');
                $new_path = "{$last_name}-{$date}.{$image->getClientOriginalExtension()}";
                $image_path = $image->storeAs('public/profile_images', $new_path);
                $image = $image_path;
            }else{
                $image = $defaultImage_path;
            }

            Log::info($request->all());
            Log::info($image);

            $password = $request->last_name.$request->division_name.$request->birthdate;
            $employee_id = $division->abbreviation.'-'.

            //Since the head will register each employee temporarily, the password will be automatically generated by the system, to ensure that the employee registed will log in and change their password.
            $user = User::create([
                'division_id' => $division_id,
                'lname' => $request->last_name,
                'fname' => $request->first_name,
                'mname' => $request->middle_name,
                'position' => $request->position,
                'address' => $request->address,
                'birthdate' => $request->birthdate,
                'martial_status' => $request->marital_status,
                'contact_nos' => $request->contact_nos,
                'email' => $request->email,
                'image_path' => $image,
                'emp_status' => 1,
                'password' => \Illuminate\Support\Facades\Hash::make($password)
            ]);

            Log::info($user);

            return response()->json('success', 200);
        }
        catch(\Error $errors)
        {
            Log::error('Error: '.$errors->getMessage());
            return response()->json(['Errors: '.$errors->getMessage()], 500);
        }

    }

    /**
     * Display the specified resource.
     */
    public function show($employeeNumber)
    {
        Log::info("Fetching employee with employee number: " . $employeeNumber);
        $employee = User::where('employee_number', '=', $employeeNumber)->with('divisions')->first();

        if ($employee) {
            return response()->json($employee);
        } else {
            return response()->json(['error' => 'Employee not found'], 404);
        }
    }



    /**
     * Show the form for editing the specified resource.
     */
    public function edit($employeeNumber)
    {
        $employee = User::where('employee_number', '=', $employeeNumber)
            ->with('divisions')
            ->first();

        if ($employee) {
            return response()->json($employee);
        } else {
            return response()->json(['error' => 'Employee not found'], 404);
        }
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(EmployeeUpdateRequest $request, User $employees)
    {
        $request->user()->fill($request->validated());

        $request->user()->save();
        return redirect(route('documents.employees', absolute: false))->with('success');
    }

    /**
     * The head requested us if instead of deleting employee information, we will instead archive the data, in which it will be automatically deleted from the system for a certain time * period depending on what the head decides.
     */
    public function destroy($id)
    {
        $archived = User::where('employee_number', $id)->update(['emp_status' => 0]);

        if($archived){return response()->json('success', 200);}

        return response()->json('Error', 500);
    }
}
